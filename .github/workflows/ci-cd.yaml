name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  terraform-policy-check:
    name: Check Terraform Security Policies with OPA
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install OPA
      run: |
        wget https://github.com/open-policy-agent/opa/releases/download/v0.55.0/opa_linux_amd64
        chmod +x opa_linux_amd64
        sudo mv opa_linux_amd64 /usr/local/bin/opa

    - name: Run OPA Policy Check
      run: opa eval --data policy/ --input terraform/modules/deployments/main.tf --format=json 'data.kubernetes.security.deny'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform-policy-check

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin && ls -al
      

    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-python-api:${{ github.run_number }} . 

    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-python-api:${{ github.run_number }}

  deploy:
    name: Deploy to Azure Kubernetes Service (AKS)
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Change to Terraform Directory
      run: cd terraform && ls -al

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Set up Azure authentication
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

    - name: Terraform Init
      run: terraform init -input=false

    - name: Terraform Plan
      run: terraform plan -input=false -out=tfplan

    - name: Terraform Apply
      run: terraform apply -input=false tfplan
